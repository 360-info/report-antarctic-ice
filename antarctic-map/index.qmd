---
# omit title and subtitle if you're doing a custom title block
title: Untitled
subtitle: A thing here
# for social previews
pagetitle: Untitled
description: A description for social previews
twitter-card:
  site: "@360info_global"
  image: "/folder/example.png"
open-graph:
  image: "/folder/example.png"
resources:
  - example.png
format:
  360-embed-html: default
# metadata for modals and embed sharing functionality
360embed:
  byline: James Goldie, 360info
  data-source: XXX
  type: map
  aspect-ratio: 20 / 19
  min-height: 500px
  bg-colour: white
  title: "Interactive: title"
  domain: https://example.360visuals.org
  fragments: state, month
  path: /map/
  about: |
    Here's a place to **tell people** and [link to things](https://example.com)!
---

{{< include _popups/_buttons.qmd >}}

<!-- geotiff in observable plot:
// https://observablehq.com/@neocartocnrs/display-and-project-a-geotiff-with-plot -->

```{ojs}
//| label: load-data
turf = require("@turf/turf@6.5.0")
FA = FileAttachment

// use turf.js to make the geojson winding order compatible with d3.js
async function fixedGeoJSON(x) {
  const raw = await FA(x).json()
  console.log("Raw " + x + ":", raw)
  raw.features = raw.features.map(function(f) {
    return turf.rewind(f, { reverse:true });
  })
  return raw
}

// bedHeights = fixedGeoJSON("/data/bedmap2/bedmap2_bed_heights.geojson")
bedHeights = FA("/data/bedmap2/bedmap2_bed_heights.geojson").json()
// landIceOutline = fixedGeoJSON("/data/bedmap2/bedmap2_surface_outline.geojson")

```



```{ojs}
//| label: map

Plot.plot({
  // projection: "equal-earth",
  // projection: {type: "orthographic", rotate: [0, -30, 20]},
  projection: ({width, height}) => d3.geoAzimuthalEquidistant()
    .rotate([0, 90])
    .translate([width / 2, height / 2])
    .scale(width / 1.05)
    .clipAngle(40),
  color: {
    type: "ordinal",
    range: [
        "#084594",
        "#2171b5",
        "#4292c6",
        "#6baed6",
        "#9ecae1",
        "#c6dbef",
        "#eff3ff",
        "#fe9929",
        "#ec7014",
        "#cc4c02",
        "#993404"
        ],
    label: "Height or depth (m)",
    legend: true
  },
  marks: [
    Plot.geo(bedHeights, {
      fill: d => d.properties.hi,
      fillOpacity: 0.75,
      stroke: null
    }),
    // Plot.geo(landIceOutline, {stroke: "#333333", fillOpacity: 0.2}),
    // Plot.graticule(),
    // Plot.sphere(),
  ],
  height: 650
})
```

{{< include _popups/_dialogs.qmd >}}
