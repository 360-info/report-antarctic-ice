---
# omit title and subtitle if you're doing a custom title block
title: Untitled
subtitle: A thing here
# for social previews
pagetitle: Untitled
description: A description for social previews
twitter-card:
  site: "@360info_global"
  image: "/folder/example.png"
open-graph:
  image: "/folder/example.png"
resources:
  - example.png
format:
  360-embed-html: default
# metadata for modals and embed sharing functionality
360embed:
  byline: James Goldie, 360info
  data-source: XXX
  type: map
  aspect-ratio: 20 / 19
  min-height: 500px
  bg-colour: white
  title: "Interactive: title"
  domain: https://example.360visuals.org
  fragments: state, month
  path: /map/
  about: |
    Here's a place to **tell people** and [link to things](https://example.com)!
---

{{< include _popups/_buttons.qmd >}}

<!-- geotiff in observable plot:
// https://observablehq.com/@neocartocnrs/display-and-project-a-geotiff-with-plot -->

```{ojs}
//| label: load-data
turf = require("@turf/turf@6.5.0")
FA = FileAttachment

// use turf.js to make the geojson winding order compatible with d3.js
async function fixedGeoJSON(x) {
  const raw = await FA(x).json()
  console.log("Raw " + x + ":", raw)
  raw.features = raw.features.map(function(f) {
    return turf.rewind(f, { reverse:true });
  })
  return raw
}

// bedHeights = fixedGeoJSON("/data/bedmap2/bedmap2_bed_heights.geojson")
bedHeights = FA("/data/bedmap2/bedmap2_bed_heights.geojson").json()
landIceOutline = fixedGeoJSON("/data/bedmap2/bedmap2_surface_outline.geojson")

```

```{ojs}
//| label: inputs
viewof showLandIce = Inputs.checkbox(["Show land ice"])
```



```{ojs}
//| label: map

Plot.plot({
  // projection: "equal-earth",
  // projection: {type: "orthographic", rotate: [0, -30, 20]},
  projection: ({width, height}) => d3.geoAzimuthalEquidistant()
    .rotate([0, 90])
    .translate([width / 2, height / 2])
    .scale(width / 1.05)
    .clipAngle(40),
  color: {
    type: "ordinal",
    range: [
        "#084594",
        "#2171b5",
        "#4292c6",
        "#6baed6",
        "#9ecae1",
        "#c6dbef",
        "#eff3ff",
        "#fec44f",
        "#ec7014",
        "#cc4c02",
        "#993404"
        // "#bdbdbd",
        // "#969696",
        // "#737373",
        // "#525252"
        ],
    label: "Height or depth (m)",
    legend: true
  },
  marks: [
    Plot.geo(bedHeights, {
      fill: d => d.properties.hi,
      fillOpacity: 0.75,
      stroke: null
    }),
    pattern,
    showLandIce.includes("Show land ice") ? Plot.geo(landIceOutline, {
      fill: "url(#stripes)",
      stroke: "#333333",
      fillOpacity: 0.75
    }) : null,
    // Plot.graticule(),
    // Plot.sphere(),
  ],
  height: 650
})
```

```{ojs}
//| label: crosshatch-pattern

pattern = () => svg`<defs><pattern id="stripes" width="100" height="100" patternUnits="userSpaceOnUse" stroke="#333333" stroke-width="1"><line x1="-53.03" y1="53.03" x2="53.03" y2="-53.03"/><line x1="-47.48" y1="58.59" x2="58.59" y2="-47.48"/><line x1="-41.92" y1="64.14" x2="64.14" y2="-41.92"/><line x1="-36.37" y1="69.7" x2="69.7" y2="-36.37"/><line x1="-30.81" y1="75.26" x2="75.26" y2="-30.81"/><line x1="-25.26" y1="80.81" x2="80.81" y2="-25.26"/><line x1="-19.7" y1="86.37" x2="86.37" y2="-19.7"/><line x1="-14.14" y1="91.92" x2="91.92" y2="-14.14"/><line x1="-8.59" y1="97.48" x2="97.48" y2="-8.59"/><line x1="-3.03" y1="103.03" x2="103.03" y2="-3.03"/><line x1="2.52" y1="108.59" x2="108.59" y2="2.52"/><line x1="8.08" y1="114.14" x2="114.14" y2="8.08"/><line x1="13.63" y1="119.7" x2="119.7" y2="13.63"/><line x1="19.19" y1="125.26" x2="125.26" y2="19.19"/><line x1="24.74" y1="130.81" x2="130.81" y2="24.74"/><line x1="30.3" y1="136.37" x2="136.37" y2="30.3"/><line x1="35.86" y1="141.92" x2="141.92" y2="35.86"/><line x1="41.41" y1="147.48" x2="147.48" y2="41.41"/><line x1="46.97" y1="153.03" x2="153.03" y2="46.97"/></pattern></defs>`
```

{{< include _popups/_dialogs.qmd >}}
